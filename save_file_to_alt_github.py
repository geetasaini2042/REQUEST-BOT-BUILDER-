import os
import json
import base64
import logging
import requests
from dotenv import load_dotenv

load_dotenv()

# ЁЯУЬ Logger рд╕реЗрдЯрдЕрдк
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger("AltGitHubSaver")

# тЪЩя╕П рдкрд░реНрдпрд╛рд╡рд░рдг рд╕реЗ GitHub Token
ALT_GITHUB_TOKEN = os.getenv("ALT_GITHUB_TOKEN")  # <--- .env рдореЗрдВ define рдХрд░реЗрдВ

# тЪЩя╕П Repository рдФрд░ Owner Details
ALT_REPO = "sainipankaj2007ps/Database-for-Telegram-builder"
GITHUB_API = "https://api.github.com"


def save_json_to_alt_github(local_json_path: str, github_path: str):
    """
    ЁЯУж Local JSON рдлрд╝рд╛рдЗрд▓ рдХреЛ рджреВрд╕рд░реЗ GitHub Repo рдореЗрдВ рдЕрдкрд▓реЛрдб рдпрд╛ рдЕрдкрдбреЗрдЯ рдХрд░рддрд╛ рд╣реИред
    Args:
        local_json_path (str): рд▓реЛрдХрд▓ JSON рдлрд╝рд╛рдЗрд▓ рдХрд╛ pathред
        github_path (str): GitHub рдореЗрдВ Repo рдХреЗ рдЕрдВрджрд░ path (рдЙрджрд╛: 'data/bots.json')
    """

    try:
        if not ALT_GITHUB_TOKEN:
            raise ValueError("тЪая╕П ALT_GITHUB_TOKEN environment variable рд╕реЗрдЯ рдирд╣реАрдВ рд╣реИ")

        if not os.path.exists(local_json_path):
            raise FileNotFoundError(f"тЪая╕П рдлрд╝рд╛рдЗрд▓ рдирд╣реАрдВ рдорд┐рд▓реА: {local_json_path}")

        with open(local_json_path, "r", encoding="utf-8") as f:
            json_content = f.read()

        # GitHub API URL
        url = f"{GITHUB_API}/repos/{ALT_REPO}/contents/{github_path}"

        # рдкрд╣рд▓реЗ Check рдХрд░реЗрдВ рдХрд┐ рдлрд╝рд╛рдЗрд▓ рдореМрдЬреВрдж рд╣реИ рдпрд╛ рдирд╣реАрдВ
        headers = {"Authorization": f"token {ALT_GITHUB_TOKEN}"}
        response = requests.get(url, headers=headers)

        sha = None
        if response.status_code == 200:
            sha = response.json()["sha"]  # рдлрд╝рд╛рдЗрд▓ рдкрд╣рд▓реЗ рд╕реЗ рдореМрдЬреВрдж рд╣реИ
            logger.info("ЁЯМА Existing file рдорд┐рд▓рд╛, update рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛")
        elif response.status_code == 404:
            logger.info("ЁЯЖХ рдирдИ рдлрд╝рд╛рдЗрд▓ рдмрдирд╛рдИ рдЬрд╛рдПрдЧреА")
        else:
            response.raise_for_status()

        # рдЕрдм рдлрд╝рд╛рдЗрд▓ upload/update рдХрд░реЗрдВ
        data = {
            "message": f"Update JSON file {github_path}",
            "content": base64.b64encode(json_content.encode()).decode(),
            "branch": "main",
        }

        if sha:
            data["sha"] = sha  # Update рдХреЗ рд▓рд┐рдП SHA рджреЗрдирд╛ рдЬрд░реВрд░реА

        upload = requests.put(url, headers=headers, data=json.dumps(data))
        upload.raise_for_status()

        logger.info(f"тЬЕ рдлрд╝рд╛рдЗрд▓ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рд╕реЗрд╡ рдХреА рдЧрдИ: {github_path}")
        return {"status": "success", "path": github_path}

    except Exception as e:
        logger.error(f"тЭМ Error saving to alternate GitHub: {e}")
        return {"status": "error", "message": str(e)}