import os
import json
import base64
import requests
from common_data import BASE_URL

# ‚úÖ GitHub config
GITHUB_TOKEN = os.getenv("GITHUB_TOKEN")
GITHUB_REPO = "geetasaini2042/Database"
GITHUB_PATH = "all_registered_bot.json"
API_URL = f"https://api.github.com/repos/{GITHUB_REPO}/contents/{GITHUB_PATH}"

def save_registered_bot_to_github(owner_id: int, bot_username: str, bot_id: str):
    """
    ‚úÖ Function: save_registered_bot_to_github
    ‡§ï‡§æ‡§Æ: all_registered_bot.json ‡§ï‡•ã GitHub ‡§∏‡•á fetch ‡§ï‡§∞‡§ï‡•á ‡§Ö‡§™‡§°‡•á‡§ü ‡§ï‡§∞‡§§‡§æ ‡§π‡•à‡•§
    - ‡§Ö‡§ó‡§∞ ‡§´‡§æ‡§á‡§≤ ‡§Æ‡•å‡§ú‡•Ç‡§¶ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à ‡§§‡•ã ‡§®‡§à ‡§¨‡§®‡§æ‡§§‡§æ ‡§π‡•à‡•§
    - ‡§π‡§∞ owner_id ‡§ï‡•á ‡§Ö‡§Ç‡§¶‡§∞ ‡§â‡§∏‡§ï‡•á ‡§¨‡•â‡§ü‡•ç‡§∏ ‡§∏‡•á‡§µ ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§
    - ‡§π‡§∞ ‡§¨‡•â‡§ü ‡§Æ‡•á‡§Ç username ‡§î‡§∞ webhook_base_url ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§∏‡•á‡§µ ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§
    """

    headers = {
        "Authorization": f"token {GITHUB_TOKEN}",
        "Accept": "application/vnd.github.v3+json"
    }

    # üîπ Step 1: ‡§´‡§æ‡§á‡§≤ fetch ‡§ï‡§∞‡•á‡§Ç
    response = requests.get(API_URL, headers=headers)
    if response.status_code == 200:
        content = response.json()
        sha = content["sha"]
        file_data = json.loads(base64.b64decode(content["content"]).decode("utf-8"))
    else:
        # ‡§Ö‡§ó‡§∞ file ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä ‡§§‡•ã ‡§®‡§Ø‡§æ dict ‡§¨‡§®‡§æ‡§è‡§Ç
        file_data = {}
        sha = None

    owner_key = str(owner_id)

    # üîπ Step 2: owner entry ensure ‡§ï‡§∞‡•á‡§Ç
    if owner_key not in file_data:
        file_data[owner_key] = {"bots": {}}

    # üîπ Step 3: bot data add/update ‡§ï‡§∞‡•á‡§Ç
    file_data[owner_key]["bots"][bot_id] = {
        "username": bot_username,
        "webhook_base_url": BASE_URL
    }

    # üîπ Step 4: updated JSON ‡§ï‡•ã encode ‡§ï‡§∞‡•á‡§Ç
    updated_content = json.dumps(file_data, indent=4, ensure_ascii=False)
    encoded_content = base64.b64encode(updated_content.encode("utf-8")).decode("utf-8")

    # üîπ Step 5: GitHub ‡§™‡§∞ upload ‡§ï‡§∞‡•á‡§Ç
    payload = {
        "message": f"Update bot {bot_username} ({bot_id}) for owner {owner_id}",
        "content": encoded_content,
        "branch": "main"
    }
    if sha:
        payload["sha"] = sha

    upload_response = requests.put(API_URL, headers=headers, json=payload)

    # üîπ Step 6: Result print ‡§ï‡§∞‡•á‡§Ç
    if upload_response.status_code in [200, 201]:
        print(f"‚úÖ Bot '{bot_username}' ({bot_id}) added/updated for owner '{owner_id}' successfully!")
    else:
        print(f"‚ùå GitHub upload failed: {upload_response.status_code}")
        print(upload_response.text)